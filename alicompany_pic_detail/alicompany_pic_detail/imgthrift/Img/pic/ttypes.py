#
# Autogenerated by Thrift Compiler (0.9.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TException, TApplicationException

from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None



class FileInfo:
  """
  Attributes:
   - fileUrl
   - fileName
   - fileContext
   - gmFormat
   - operateResult
   - businTyp
   - isReturnUrl
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'fileUrl', None, None, ), # 1
    (2, TType.STRING, 'fileName', None, None, ), # 2
    (3, TType.STRING, 'fileContext', None, None, ), # 3
    (4, TType.LIST, 'gmFormat', (TType.STRING,None), None, ), # 4
    (5, TType.I32, 'operateResult', None, None, ), # 5
    (6, TType.STRING, 'businTyp', None, None, ), # 6
    (7, TType.STRING, 'isReturnUrl', None, None, ), # 7
  )

  def __init__(self, fileUrl=None, fileName=None, fileContext=None, gmFormat=None, operateResult=None, businTyp=None, isReturnUrl=None,):
    self.fileUrl = fileUrl
    self.fileName = fileName
    self.fileContext = fileContext
    self.gmFormat = gmFormat
    self.operateResult = operateResult
    self.businTyp = businTyp
    self.isReturnUrl = isReturnUrl

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.fileUrl = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.fileName = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.fileContext = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.LIST:
          self.gmFormat = []
          (_etype3, _size0) = iprot.readListBegin()
          for _i4 in xrange(_size0):
            _elem5 = iprot.readString();
            self.gmFormat.append(_elem5)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I32:
          self.operateResult = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.businTyp = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.STRING:
          self.isReturnUrl = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('FileInfo')
    if self.fileUrl is not None:
      oprot.writeFieldBegin('fileUrl', TType.STRING, 1)
      oprot.writeString(self.fileUrl)
      oprot.writeFieldEnd()
    if self.fileName is not None:
      oprot.writeFieldBegin('fileName', TType.STRING, 2)
      oprot.writeString(self.fileName)
      oprot.writeFieldEnd()
    if self.fileContext is not None:
      oprot.writeFieldBegin('fileContext', TType.STRING, 3)
      oprot.writeString(self.fileContext)
      oprot.writeFieldEnd()
    if self.gmFormat is not None:
      oprot.writeFieldBegin('gmFormat', TType.LIST, 4)
      oprot.writeListBegin(TType.STRING, len(self.gmFormat))
      for iter6 in self.gmFormat:
        oprot.writeString(iter6)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.operateResult is not None:
      oprot.writeFieldBegin('operateResult', TType.I32, 5)
      oprot.writeI32(self.operateResult)
      oprot.writeFieldEnd()
    if self.businTyp is not None:
      oprot.writeFieldBegin('businTyp', TType.STRING, 6)
      oprot.writeString(self.businTyp)
      oprot.writeFieldEnd()
    if self.isReturnUrl is not None:
      oprot.writeFieldBegin('isReturnUrl', TType.STRING, 7)
      oprot.writeString(self.isReturnUrl)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)
